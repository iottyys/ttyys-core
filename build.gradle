plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
//    id "com.google.protobuf" version "0.8.15"
//    id 'com.linkedin.python' version "0.9.11"
    id 'groovy'
    id 'java'
    id 'idea'
}

group 'io.ttyys.core'
version '1.0-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

jar.enabled = true

ext {
    set('groovyVersion', '2.4.15')
    set('guavaVersion', '30.1-jre')
    set('execVersion', '1.3')
    set('camelVersion', '3.6.0')
    set('mybatisPlusVersion', '3.4.2')
    set('javapoetVersion', '1.13.0')
}

idea {
    module {
        sourceDirs += file('src/main/python')
        sourceDirs += file('src/main/proto')
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencyManagement {
    imports {
        //noinspection GrUnresolvedAccess
        mavenBom "org.apache.camel.springboot:camel-spring-boot-dependencies:${camelVersion}"
    }
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation "com.squareup:javapoet:${javapoetVersion}"

    compileOnly "org.springframework.boot:spring-boot-starter-aop"
    testImplementation "org.springframework.boot:spring-boot-starter-aop"

    implementation "org.apache.avro:avro:1.10.1"
    implementation "org.apache.avro:avro-ipc:1.10.1"
    implementation "org.apache.avro:avro-compiler:1.10.1"
//    implementation "org.apache.avro:avro-tools:1.10.1"
    implementation 'com.google.protobuf:protobuf-java:3.15.4'
    implementation "org.apache.commons:commons-exec:${execVersion}"

    // for camel
    implementation "org.apache.camel.springboot:camel-spring-boot-starter"
    implementation "org.apache.camel.springboot:camel-bean-starter"
    implementation "org.apache.camel.springboot:camel-bean-validator-starter"
    implementation "org.apache.camel.springboot:camel-json-validator-starter"
    implementation "org.apache.camel.springboot:camel-jackson-starter"
    testImplementation "org.apache.camel:camel-test-spring-junit5"

    compileOnly "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"
    testImplementation "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"

    // for lombok
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    runtimeOnly "com.h2database:h2"

    implementation "com.google.protobuf:protoc:3.15.4:@pom"
}

//protobuf {
//    protoc {
//        artifact = "com.google.protobuf:protoc:3.8.0"
//    }
////    generateProtoTasks.generatedFilesBaseDir = "$projectDir/generated"
//    generateProtoTasks {
//        all().each { task ->
//            // Here you can configure the task
//            task.builtins {
//                python {}
//            }
//        }
//    }
//}

task packagePythonLinux(type: Exec) {
    workingDir "src/main/resources/scripts"
    copy {
        from "${workingDir}"
        into "${buildDir}/scripts/linux"
    }
    commandLine 'docker', 'run', '-v', "${buildDir}/scripts/linux:/src/", 'cdrx/pyinstaller-linux:python3', '-c', 'pyinstaller -F PythonSocketServer.py'
}

task packagePythonWindows(type: Exec) {
    workingDir "src/main/resources/scripts"
    copy {
        from "${workingDir}"
        into "${buildDir}/scripts/windows"
    }
    commandLine 'docker', 'run', '-v', "${buildDir}/scripts/windows:/src/", 'cdrx/pyinstaller-windows:python3', '-c', 'pyinstaller -F PythonSocketServer.py'
}

task installPython(type: Copy) {
    dependsOn(packagePythonLinux, packagePythonWindows)
    from "${buildDir}/scripts/linux/dist", "${buildDir}/scripts/windows/dist"
    into "${buildDir}/resources/main/bin"
}

processResources {
//    exclude "**/scripts"
//    dependsOn installPython
}

test {
    useJUnitPlatform()
}
