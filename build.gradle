plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'groovy'
    id 'java'
    id 'idea'
}

group 'io.ttyys.core'
version '1.0-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

jar.enabled = true
bootJar.enabled = false

ext {
    set('groovyVersion', '2.4.15')
    set('guavaVersion', '30.1-jre')
    set('execVersion', '1.3')
    set('camelVersion', '3.6.0')
    set('mybatisPlusVersion', '3.4.2')
    set('javapoetVersion', '1.13.0')
}

idea {
    module {
        sourceDirs += file('src/main/python')
        sourceDirs += file('src/main/proto')
        sourceDirs += file('src/main/avro')
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencyManagement {
    imports {
        //noinspection GrUnresolvedAccess
        mavenBom "org.apache.camel.springboot:camel-spring-boot-dependencies:${camelVersion}"
    }
}

dependencies {

    compileOnly project(':annotation-processor')
    annotationProcessor project(':annotation-processor')

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation "com.squareup:javapoet:${javapoetVersion}"

    compileOnly "org.springframework.boot:spring-boot-starter-aop"
    testImplementation "org.springframework.boot:spring-boot-starter-aop"

    implementation "org.apache.avro:avro:1.10.1"
    implementation "org.apache.avro:avro-ipc:1.10.1"
    implementation "org.apache.avro:avro-ipc-netty:1.10.1"
//    implementation "org.apache.avro:avro-compiler:1.8.1"
    implementation 'com.google.protobuf:protobuf-java:3.15.4'
    implementation "org.apache.commons:commons-exec:${execVersion}"

    // for camel
    implementation "org.apache.camel.springboot:camel-spring-boot-starter"
    implementation "org.apache.camel.springboot:camel-bean-starter"
    implementation "org.apache.camel.springboot:camel-bean-validator-starter"
    implementation "org.apache.camel.springboot:camel-dozer-starter"
    testImplementation "org.apache.camel:camel-test-spring-junit5"

    // mybatis-plus support
    compileOnly "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"
    testImplementation "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"

    // for lombok
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    runtimeOnly "com.h2database:h2"
}

task avprPython(type: Sync) {
    from 'src/main/resources/avro'
    into 'src/main/python/rpcserver/avro/proto'
    include '**/*.avpr'
}

task packagePythonLinux(type: Exec) {
    dependsOn avprPython
    workingDir "${buildDir}/tmp/python/linux"
    copy {
        from "src/main/python"
        into "${workingDir}"
    }
    commandLine 'docker', 'run', '-v', "${workingDir}:/src/", 'cdrx/pyinstaller-linux:python3', '-c', 'pyinstaller -F server.spec'
}

packagePythonLinux.onlyIf {
    !file("${buildDir}/resources/main/bin/server").exists()
}

task packagePythonWindows(type: Exec) {
    dependsOn avprPython
    workingDir "${buildDir}/tmp/python/windows"
    copy {
        from "src/main/python"
        into "${workingDir}"
    }
    commandLine 'docker', 'run', '-v', "${workingDir}:/src/", 'cdrx/pyinstaller-windows:python3', '-c', 'pyinstaller -F server.spec'
}

packagePythonWindows.onlyIf {
    !file("${buildDir}/resources/main/bin/server.exe").exists()
}

task packagePythonOSX(type: Exec) {
    dependsOn avprPython
    workingDir "${buildDir}/tmp/python/osx"
    copy {
        from "src/main/python"
        into "${workingDir}"
    }
    commandLine "${rootDir}/venv/bin/pyinstaller", "-F", "server.spec"
    doFirst {
        exec {
            workingDir "${buildDir}/tmp/python/osx"
            commandLine "${rootDir}/venv/bin/pip", "install", "-r", "requirements.txt"
        }
    }
}

packagePythonOSX.onlyIf {
    org.gradle.internal.os.OperatingSystem.current().isMacOsX() && !file("${buildDir}/resources/main/bin/osx/server").exists()
}

task installPython(type: Copy) {
    dependsOn(packagePythonLinux, packagePythonWindows, packagePythonOSX)
    from "${buildDir}/scripts/linux/dist", "${buildDir}/scripts/windows/dist", "${buildDir}/scripts/osx"
    into "${buildDir}/resources/main/bin"
}

processResources {
//    dependsOn installPython
}

compileJava {
    dependsOn processResources
}

test {
    useJUnitPlatform()
}
